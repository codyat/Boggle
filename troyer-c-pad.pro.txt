% randelem(+list,?elem)
randelem(L,X) :- length(L,LL), I is random(LL), nth0(I,L,X).

% selandrem(+index,+list,-list,-elem)
selandrem0(0,[X|R],R,X) :- !.
selandrem0(I,[A|R],[A|Rout],X) :- NI is I-1, selandrem0(NI,R,Rout,X).

% just a helper function to boggleboard, below
% bbhelp(-board,+nleft,+cubes)
bbhelp([],0,[]) :- !.
bbhelp([X|R],L,CS) :- I is random(L), selandrem0(I,CS,NCS,C), randelem(C,X), !,
				NL is L-1, bbhelp(R,NL,NCS).

% returns a randomly chosen boggle board.
% No choice points -- will not backtrack
% boggleboard(-board)
boggleboard(B) :- bbhelp(B,16,
		[['A','A','E','E','G','N'],['A','B','B','J','O','O'],
		 ['A','C','H','O','P','S'],['A','F','F','K','P','S'],
		 ['A','O','O','T','T','W'],['C','I','M','O','T','U'],
		 ['D','E','I','L','R','X'],['D','E','L','R','V','Y'],
		 ['D','I','S','T','T','Y'],['E','E','G','H','N','W'],
		 ['E','E','I','N','S','U'],['E','H','R','T','V','W'],
		 ['E','I','O','S','S','T'],['E','L','R','T','T','Y'],
		 ['H','I','M','N','Q','U'],['H','L','N','N','R','Z']]).

% boggleletter(+board,?xindex,?yindex,?character)
boggleletter(B,X,Y,C) :- nth0(N,B,C), XR is N/4, X is floor(XR), Y is mod(N,4).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% helper(board, x, y, node(X, bool, subwords, nextletter), outputlist, already_exist)

helper(B, Xcoord, Ycoord, node(X, true,_,_), [X], Rest) :- boggleletter(B,Xcoord,Ycoord,X),
                                                           not(member((Xcoord,Ycoord),Rest)).
																														 
helper(B, Xcoord, Ycoord, node(X, _,S,_), [X|W], Rest) :- boggleletter(B,Xcoord,Ycoord,X),
                                                          adjacent(Xcoord, Ycoord, X1, Y1), 
                                                          not(member((Xcoord,Ycoord),Rest)),
                                                          helper(B, X1, Y1, S, W, [(Xcoord, Ycoord)|Rest]).
																												
helper(B, Xcoord, Ycoord, node(_,_,_,N), [C|W], Rest) :- helper(B, Xcoord, Ycoord, N, [C|W], Rest).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% check left
adjacent(X1, Y, X2, Y) :- X2 is X1 - 1, X2 >= 0, X2 =< 3.
% check right
adjacent(X1, Y, X2, Y) :- X2 is X1 + 1, X2 >= 0, X2 =< 3.
% check down
adjacent(X, Y1, X, Y2) :- Y2 is Y1 + 1, Y2 >= 0, Y2 =< 3.
% check up
adjacent(X, Y1, X, Y2) :- Y2 is Y1 - 1, Y2 >= 0, Y2 =< 3.
% check up left
adjacent(X1, Y1, X2, Y2) :- X2 is X1 - 1, Y2 is Y1 - 1, X2 >= 0, X2 =< 3, Y2 >= 0, Y2 =< 3.
% check up right
adjacent(X1, Y1, X2, Y2) :- X2 is X1 + 1, Y2 is Y1 - 1, X2 >= 0, X2 =< 3, Y2 >= 0, Y2 =< 3.
% check down right
adjacent(X1, Y1, X2, Y2) :- X2 is X1 + 1, Y2 is Y1 + 1, X2 >= 0, X2 =< 3, Y2 >= 0, Y2 =< 3.
% check down left
adjacent(X1, Y1, X2, Y2) :- X2 is X1 - 1, Y2 is Y1 + 1, X2 >= 0, X2 =< 3, Y2 >= 0, Y2 =< 3.

% isboggleword(+board,+dictionary,?word)
isboggleword(B, D, W) :- helper(B, _, _, D, W, []).

% you should not use this... you will need to traverse the dictionary
% yourself.  However, this checks whether the first argument (a list of
% characters) is in the dictionary (the second argument)
% order it adds the word to the dictionary
% indict(?word,?dictionary)
indict([X],node(X,true,_,_)).
indict([X|RX],node(X,_,Y,_)) :- indict(RX,Y).
indict([X|RX],node(_,_,_,Y)) :- indict([X|RX],Y).

% a helper function to loaddict, below
loaddicthelp(S,_) :- at_end_of_stream(S), !.
loaddicthelp(S,D) :- read_line_to_codes(S,C), atom_codes(Str,C),
		atom_chars(Str,W), indict(W,D), !, loaddicthelp(S,D).

% a helper function to loaddict, only succeeds if the dictionary is grounded.
restrictdict(null) :- !.
restrictdict(node(_,false,L,R)) :- !, restrictdict(L), !, restrictdict(R).
restrictdict(node(_,true,L,R)) :- !, restrictdict(L), !, restrictdict(R).

% loads a dictionary
% loaddict(+filename,-dictionary)
loaddict(Filename,Dict) :- 
	open(Filename,read,S), !,
	loaddicthelp(S,Dict), !, 
	restrictdict(Dict),
	close(S).

% draws a boggle board 
% drawboard(+board).
drawboard(B) :- drawboard(B,16).
drawboard(_,0) :- !.
drawboard([X|Y],I) :- 1 =:= mod(I,4), !, writeln(X),
		II is I-1, drawboard(Y,II).
drawboard([X|Y],I) :- write(X), II is I-1, drawboard(Y,II).

% word is a list of characters
% boggleword(+board,?word)
boggleword(B,X) :- loaddict(bogwords,D), isboggleword(B,D,X).

% below is only needed for Q3
%---------------------

%removedup(+list, -sorted_list)
removedup(XL, XL2) :- sort(XL, XL2).

% converttostr(?listlistchar,?liststr)
converttostr([],[]).
converttostr([X|XR],[Y|YR]) :- atom_chars(Y,X), converttostr(XR,YR).

% allbogglewords(+board,-words)
allbogglewords(B,X) :- loaddict(bogwords,D),
	findall(W,isboggleword(B,D,W),XL),
	removedup(XL,XL2), converttostr(XL2,X).
